{"version":3,"sources":["colors.js","App.js"],"names":["theme","bg","black","gray","toDoBg","App","useState","working","setWorking","text","setText","toDos","setToDos","useEffect","loadToDo","saveToDo","toSave","a","async","AsyncStorage","setItem","JSON","stringify","getItem","s","parse","console","log","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","btnText","color","TextInput","onSubmitEditing","newToDos","Date","now","onChangeText","payload","value","placeholder","input","ScrollView","Object","keys","map","key","toDo","toDoText","Platform","OS","confirm","Alert","alert","deleteToDo","Fontisto","name","size","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","fontSize","fontWeight","paddingVertical","borderRadius","marginVertical","elevation","marginBottom","alignItems"],"mappings":"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","file":"static/js/app.95945ffa.chunk.js","sourcesContent":["const theme = {\r\n  bg: \"#F6F8FC\",\r\n  black: \"#3A3D40\",\r\n  gray: \"#A6A8AC\",\r\n  toDoBg: \"#5C5C60\",\r\n};\r\n\r\nexport default theme;\r\n","import { StatusBar } from \"expo-status-bar\";\nimport { useEffect, useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput,\n  ScrollView,\n  Alert,\n  Platform,\n} from \"react-native\";\nimport theme from \"./colors\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { Fontisto } from \"@expo/vector-icons\";\n\nconst STORAGE_KEY = \"@toDos\";\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [toDos, setToDos] = useState({});\n\n  useEffect(() => {\n    loadToDo();\n  }, []);\n\n  const travel = () => setWorking(false);\n  const work = () => setWorking(true);\n\n  // TextInput 변화\n  const onChangeText = (payload) => setText(payload);\n\n  // Storage에 저장\n  const saveToDo = async (toSave) => {\n    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n  };\n\n  // Storage 불러오기\n  const loadToDo = async () => {\n    try {\n      const s = await AsyncStorage.getItem(STORAGE_KEY);\n      // console.log(JSON.parse(s));\n      if (s) {\n        setToDos(JSON.parse(s));\n      }\n    } catch (e) {\n      console.log(\"Load Error msg\");\n    }\n  };\n\n  // 객체로 Text 저장\n  const addToDo = async () => {\n    if (text === \"\") {\n      return;\n    }\n    const newToDos = { ...toDos, [Date.now()]: { text, working } };\n\n    setToDos(newToDos);\n    await saveToDo(newToDos);\n    setText(\"\");\n  };\n\n  // 삭제 버튼\n  const deleteToDo = (key) => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"Do you want to delete this To Do?\");\n      if (ok) {\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        setToDos(newToDos);\n        saveToDo(newToDos);\n      }\n    } else {\n      Alert.alert(\"Delete To Do?\", \"Are you sure?\", [\n        { text: \"Cancel\" },\n        {\n          text: \"Sure\",\n          onPress: async () => {\n            const newToDos = { ...toDos };\n            delete newToDos[key];\n            setToDos(newToDos);\n            await saveToDo(newToDos);\n          },\n        },\n      ]);\n    }\n\n    return;\n  };\n\n  // console.log(toDos);\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text\n            style={{\n              ...styles.btnText,\n              color: working ? theme.black : theme.gray,\n            }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text\n            style={{\n              ...styles.btnText,\n              color: !working ? theme.black : theme.gray,\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <View>\n        <TextInput\n          onSubmitEditing={addToDo}\n          onChangeText={onChangeText}\n          value={text}\n          placeholder={working ? \"Add To Do\" : \"Where do you want to go\"}\n          style={styles.input}\n        />\n      </View>\n      <ScrollView>\n        {Object.keys(toDos).map((key) =>\n          toDos[key].working === working ? (\n            <View style={styles.toDo} key={key}>\n              <Text style={styles.toDoText}>{toDos[key].text}</Text>\n              <TouchableOpacity onPress={() => deleteToDo(key)}>\n                <Fontisto\n                  name=\"checkbox-active\"\n                  size={18}\n                  color={theme.black}\n                />\n              </TouchableOpacity>\n            </View>\n          ) : null\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  btnText: {\n    fontSize: 38,\n    fontWeight: \"700\",\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    borderRadius: 20,\n    marginVertical: 20,\n    fontSize: 15,\n    elevation: 3,\n  },\n  toDo: {\n    backgroundColor: \"white\",\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 30,\n    borderRadius: 20,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    // elevation: 1,\n  },\n  toDoText: {\n    color: theme.black,\n    fontSize: 17,\n    fontWeight: \"500\",\n  },\n});\n"],"sourceRoot":""}